import argparse
import sys
from typing import List
from .command_models import CommandAbstract
from ..models import AppParameters


class CommandManager:
    """
    The CommandManager class manages the command line interface for a file
    conversion utility. It facilitates the creation of a main parser, subparsers
    for commands, and handles the addition and execution of these commands.
    """

    def __init__(self) -> None:
        """
        Initializes the command manager by creating the main argument
        parser and the subparsers for sub-commands. It also initializes an empty list
        to hold CommandAbstract instances.
        """
        self.main_parser = argparse.ArgumentParser(
            description="File conversion utility."
        )
        self.sub_parser = self.main_parser.add_subparsers(
            dest="command", help="Sub-command help"
        )
        self.command_list: List[CommandAbstract] = []
        self.add_main_args()

    def add_main_args(self) -> None:
        """
        Adds the main global arguments to the main argument parser. These arguments
        are applicable regardless of the sub-command being used.
        """
        self.main_parser.add_argument(
            "--remove-source", action="store_true", help="Delete source file"
        )

    def append_command_parser(self, command: CommandAbstract) -> None:
        """
        Appends a new command parser to the subparsers. Each command is expected to be an
        instance of a class that inherits from CommandAbstract, which contains the necessary
        method to parse its specific arguments.

        Parameters:
        - command (CommandAbstract): An instance of something that inherits
          from CommandAbstract to add to the command manager.
        """
        self.command_list.append(command)
        command.parse_command(self.sub_parser)

    def finalize_arg_parser(self) -> AppParameters:
        """
        Finalizes the argument parsing process by parsing the arguments
        and matching them with their respective commands. If a matching command is
        found, it generates and returns the application parameters for that command.

        Returns:
        - AppParameters: The application parameters generated by the matched command.

        Raises:
        - SystemExit: If no command is matched, the help message is printed and the application exits.
        """
        args = self.main_parser.parse_args()
        for command in self.command_list:
            if args.command == command._name:
                app_params = command.create_app_parameters_for_command(args)
                return app_params

        self.main_parser.print_help()
        sys.exit(1)
